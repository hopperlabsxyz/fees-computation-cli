import { Command } from "@commander-js/extra-typings";
import { parseArguments } from "utils/parseArguments";
import { convertToCSV } from "utils/convertToCSV";
import * as fs from "node:fs";
import { processVault, type ProcessVaultReturn } from "core/processVault";
import { parseDeals, type AllDeals } from "parsing/parseDeals";
import type { Address } from "viem";

const program = new Command();

program
  .name("fees-computation-cli")
  .description("CLI to compute fees generated from LagoonProtocol")
  .version("0.0.1");

const computeCommand = program
  .command("compute")
  .description("Compute fees for a given vault")
  .argument("[chainId:VaultAddress...]")
  .option("--fromBlock <number>", "First block to be used in computation")
  .option("--toBlock <number>", "Last block to be used in computation")
  .option("--readable", "Should we format the output ?")
  .option("-o, --output <string>", "File to export the CSV")
  .option("--deals <string>", "Config file for OTC-deals")
  .option(
    "--fee-rebate <number>",
    "How much of a rebate will the referree get in %. 5 means the referree will receive a 5% refund",
    "5"
  )
  .option(
    "--fee-bonus <number>",
    "Value in % representing the bonus will the referrer will get. 15 means the referrer will receive a 15% of the fees generated by the referree",
    "15"
  )
  .option("-h, --help", "Display help for compute command")
  .action(async (args, options) => {
    if (options.help) {
      computeCommand.help();
      return;
    }

    const vaults = parseArguments(args);

    let deals: AllDeals = {};
    if (options.deals) deals = await parseDeals(options.deals);
    const results: ProcessVaultReturn[] = [];

    for (const vault of vaults) {
      let vaultDeals: Record<Address, number> = {};
      console.log(deals);
      if (deals[vault.chainId])
        vaultDeals = deals[vault.chainId][vault.address];

      const result = await processVault({
        fromBlock: Number(options!.fromBlock!),
        toBlock: Number(options!.toBlock!),
        deals: vaultDeals,
        readable: options!.readable!,
        feeRebate: Number(options!.feeRebate!),
        feeBonus: Number(options!.feeBonus!),
        vault,
      });
      results.push(result);
    }

    const csv = convertToCSV(results, { displayCashback: !!options.deals });

    if (options.output) {
      fs.writeFile(
        options.output,
        csv,
        {
          encoding: "utf8",
          flag: "w",
          mode: 0o666,
        },
        (err) => {
          if (err) console.log(err);
        }
      );
    } else {
      console.log(csv);
    }
  });

program.parse();
