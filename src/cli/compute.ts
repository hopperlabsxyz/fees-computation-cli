import { processVault } from "core/processVault";
import { mergeDeals, parseDeals, type AllDeals } from "parsing/parseDeals";
import { convertToCSV } from "utils/convertToCSV";
import { parseArguments } from "utils/parseArguments";
import type { Address } from "viem";
import type { Command } from "@commander-js/extra-typings";

export function setComputeCommand(command: Command) {
  command
    .command("compute")
    .description(
      "Calculate and generate fee reports for a specified vault, including referral rewards and rebates"
    )
    .argument("chainId:VaultAddress")
    .requiredOption(
      "--from-block <number>",
      "Starting block number for fee computation (inclusive). Use 'find-blocks' command to find the appropriate block number"
    )
    .requiredOption(
      "--to-block <number>",
      "Ending block number for fee computation (inclusive). Use 'find-blocks' command to find the appropriate block number"
    )
    .option("-r, --readable", "Format the output in a human-readable format")
    .option("-o, --output <string>", "Output file path for the CSV report")
    .option(
      "-d, --deals <string>",
      "Path to the configuration file containing OTC (Over-The-Counter) deals. The amount of % is express in 10^2. For example, 8% is express 800 into the csv file."
    )
    .option(
      "--fee-rebate-rate <number>",
      "Bips of fees to be refunded to the referred user (e.g., 500 means 5% of fees are refunded, 5 means 0.05% of fees are refunded)",
      "500"
    )
    .option(
      "--fee-reward-rate <number>",
      "Bips of fees to be distributed to the referrer (e.g., 1500 means referrer receives 15% of fees generated by the referred user)",
      "1500"
    )
    .addHelpText(
      "after",
      `
Examples:
  $ pnpm compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b                    # Compute for all lifetime
  $ pnpm compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -r -o fees.csv    # With readable output and CSV export
  $ pnpm compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -l 2000000 -o fees.csv  # From beginning until block 2000000
  $ pnpm compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -d dealsExample.csv -o fees.csv  # With OTC deals
  $ pnpm compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -f 1000000 -l 2000000 -r -o fees.csv -d dealsExample.csv  # All parameters
    `
    )
    .action(async (args, options) => {
      const vault = parseArguments(args);

      let deals: AllDeals = {};
      if (options.deals) deals = await parseDeals(options.deals);
      let vaultDeals: Record<Address, number> = {};

      if (deals[vault.chainId])
        vaultDeals =
          deals[vault.chainId][vault.address.toLowerCase() as Address] || {};

      vaultDeals = mergeDeals(deals[0]?.["0x0"] || {}, vaultDeals);

      const result = await processVault({
        fromBlock: Number(options!.fromBlock!),
        toBlock: Number(options!.toBlock!),
        deals: vaultDeals,
        readable: options!.readable!,
        feeRebateRate: Number(options!.feeRebateRate!) * 100,
        feeRewardRate: Number(options!.feeRewardRate!) * 100,
        vault,
      });

      const csv = convertToCSV([result], { displayCashback: true });

      if (options.output) {
        try {
          const file = Bun.file(options.output);
          await file.write(csv);
          console.log(`CSV report written to: ${options.output}`);
        } catch (error: any) {
          console.error("Error writing CSV file:", error.message);
          console.log("CSV content:");
          console.log(csv);
        }
      } else {
        console.log(csv);
      }
    });
}
