import { processVault } from "core/processVault";
import { parseDeals, type AllDeals } from "parsing/parseDeals";
import { convertToCSV } from "utils/convertToCSV";
import { parseArguments } from "utils/parseArguments";
import type { Address } from "viem";
import { computationProgram } from "../..";
import type { Command } from "@commander-js/extra-typings";

export function setComputeCommand(command: Command) {
  command
    .command("compute")
    .description("Compute fees for a given vault")
    .argument("chainId:VaultAddress")
    .requiredOption(
      "--fromBlock <number>",
      "First block to be used in computation. Required"
    )
    .requiredOption(
      "--toBlock <number>",
      "Last block to be used in computation. Required"
    )
    .option("--readable", "Should we format the output ?")
    .option("-o, --output <string>", "File to export the CSV")
    .option("--deals <string>", "Config file for OTC-deals")
    .option(
      "--fee-rebate <number>",
      "How much of a rebate will the referree get in %. 5 means the referree will receive a 5% refund",
      "5"
    )
    .option(
      "--fee-bonus <number>",
      "Value in % representing the bonus will the referrer will get. 15 means the referrer will receive a 15% of the fees generated by the referree",
      "15"
    )
    .option("-h, --help", "Display help for compute command")
    .action(async (args, options) => {
      if (options.help) {
        computationProgram.help();
        return;
      }

      const vault = parseArguments(args);

      let deals: AllDeals = {};
      if (options.deals) deals = await parseDeals(options.deals);

      let vaultDeals: Record<Address, number> = {};
      if (deals[vault.chainId])
        vaultDeals = deals[vault.chainId][vault.address];

      const result = await processVault({
        fromBlock: Number(options!.fromBlock!),
        toBlock: Number(options!.toBlock!),
        deals: vaultDeals,
        readable: options!.readable!,
        feeRebate: Number(options!.feeRebate!),
        feeBonus: Number(options!.feeBonus!),
        vault,
      });

      console.log(result.data);
      const csv = convertToCSV([result], { displayCashback: !!options.deals });

      if (options.output) {
        // fs.writeFile(
        //   options.output,
        //   csv,
        //   {
        //     encoding: "utf8",
        //     flag: "w",
        //     mode: 0o666,
        //   },
        //   (err: any) => {
        //     if (err) console.log(err);
        //   }
        // );
      } else {
        // console.log(csv);
      }
    });
}
