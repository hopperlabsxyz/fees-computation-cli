import { processVault } from "core/processVault";
import { convertToCSV } from "utils/convertToCSV";
import { parseArguments } from "utils/parseArguments";
import type { Command } from "@commander-js/extra-typings";

export function setUsualFeeCommand(command: Command) {
  command
    .command("usualfee")
    .description(
      "Calculate and generate fee reports for a specified vault, including referral rewards and rebates"
    )
    .argument("chainId:VaultAddress")
    .requiredOption(
      "-f, --from-block <number>",
      "Starting block number for fee computation (exclusive). Use 'find-blocks' command to find the appropriate block number"
    )
    .requiredOption(
      "-t, --to-block <number>",
      "Ending block number for fee computation (inclusive). Use 'find-blocks' command to find the appropriate block number"
    )
    .option("-r, --readable", "Format the output in a human-readable format")
    .option(
      "-o, --output",
      "Will save the result in a file with following format: <chainId>-<vaultAddress>-<from-block>-<to-block>.csv"
    )
    .option(
      "--noprint",
      "This will prevent the printing of the output on standoutput",
      false
    )
    .option(
      "--fee-reward-rate <number>",
      "Bips of fees to be distributed to the referrer (e.g., 1500 means referrer receives 15% of fees generated by the referred user)",
      "1500"
    )
    .addHelpText(
      "after",
      `
Examples:
  $ bun compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b  ## Compute for all lifetime
  $ bun compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -r -o fees.csv  ## With readable output and CSV export
  $ bun compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -l 2000000 -o fees.csv  ## From beginning until block 2000000
  $ bun compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -d dealsExample.csv -o fees.csv  ## With OTC deals
  $ bun compute 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -f 1000000 -l 2000000 -r -o fees.csv -d dealsExample.csv  ## All parameters
    `
    )
    .action(async (args, options) => {
      const vault = parseArguments(args);

      const result = await processVault({
        fromBlock: Number(options!.fromBlock!),
        toBlock: Number(options!.toBlock!),
        deals: {},
        readable: options!.readable!,
        feeRebateRate: 0,
        feeRewardRate: 0,
        vault,
      });

      // console.log(result.periodFees);
      let total = 0n;
      result.periodFees.forEach((p) => {
        total += p.baseFees;
        total += p.extraFees;
      });
      console.log({ total });

      const csv = convertToCSV([result], { displayCashback: true });

      if (options.output) {
        try {
          const file = Bun.file(
            `${vault.chainId}-${vault.address}-${options.fromBlock}-${options.toBlock}.csv`
          );
          await file.write(csv);
          console.log(`CSV report written to: ${file.name}`);
        } catch (error: any) {
          console.error("Error writing CSV file:", error.message);
          console.log("CSV content:");
          console.log(csv);
        }
      } else if (options.noprint == false) {
        console.log(csv);
      }
    });
}
